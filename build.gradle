buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.20.0"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'com.worksvn'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

springBoot {
    buildInfo()
}

docker {
    dependsOn build
    name "${bootJar.baseName}:latest"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = 'Finchley.SR1'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.apache.httpcomponents:httpclient:4.5.2')

    implementation project(':common')

    // Lombok
    implementation('org.projectlombok:lombok:1.16.18')
    annotationProcessor('org.projectlombok:lombok:1.16.18')

    // [swagger] Swagger doc api
    implementation('io.springfox:springfox-swagger2:2.7.0')
    implementation('io.springfox:springfox-swagger-ui:2.7.0')

    // [auth] OAuth2 + JWT for Authentication and Authorization
    implementation('org.springframework.boot:spring-boot-starter-security')
    testImplementation('org.springframework.security:spring-security-test')
    implementation('org.springframework.cloud:spring-cloud-starter-oauth2')

    // [firebase] Firebase
    implementation('com.google.api-client:google-api-client:1.23.0')
    implementation('com.google.firebase:firebase-admin:5.11.0')
    implementation('com.google.guava:guava:20.0')

    // [consul] Consul
    implementation('org.springframework.cloud:spring-cloud-starter-consul-discovery')
    implementation('com.orbitz.consul:consul-client:1.2.3')
    implementation('com.squareup.okhttp3:okhttp:3.9.0')

    // [spring actuator] Spring actuator
    implementation('org.springframework.boot:spring-boot-starter-actuator')

    // Apache POI - .xlsx reader and generator
    implementation('org.apache.poi:poi-ooxml:3.17')
    implementation('org.apache.poi:poi:3.17')

    // IText (.pdf generator) + Thymeleaf (.html binding)
//    implementation('com.itextpdf:itextpdf:5.5.13')
//    implementation('com.itextpdf.tool:xmlworker:5.5.13')
//    implementation('org.apache.pdfbox:pdfbox:2.0.13')
    implementation('org.xhtmlrenderer:flying-saucer-core:9.1.6')
    implementation('org.xhtmlrenderer:flying-saucer-pdf-itext5:9.1.6')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')

    // [jpa] Spring Data JPA - Connect SQL DBMS
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    runtime('mysql:mysql-connector-java')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
